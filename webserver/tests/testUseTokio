#[tokio::test]
async fn health (){
    let app_address = spawn_app();
    let client =  reqwest::Client::new();
    let resp = client.get(&format!("{}/health", &app_address)).send().await.expect("Failed to send request");
    assert_eq!(resp.status(), 200);
}
//this is a use from lib.rs
 fn spawn_app() -> String {
    let listener = TcpListener::bind("127.0.0.1:0").expect("Failed to bind random port");
    let port = listener.local_addr().unwrap().port();
    let server = webserver::run(listener).expect("Failed to run server");
    let _ = tokio::spawn(async move {
        server.await.unwrap();
    });
    format!("http://127.0.0.1:{}", port)  
}

#[tokio::test]
async fn subscribe_returns_a_200_for_valid_form_data(){
    let app_address = spawn_app();
    let client = reqwest::Client::new();
    let body = "name=le%20guin&email=ursula_le_guin%40gmail.com";
    let resp = client.post(&format!("{}/subscribe", &app_address)).header("Content-Type", "application/x-www-form-urlencoded").body(body).send().await.expect("Failed to send request");
    assert_eq!(resp.status(), 200);
}