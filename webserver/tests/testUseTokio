use webserver::startup::run;
use webserver::configuration::get_configuration;
use sqlx::{PgPool};
use std::net::TcpListener;
use crate::routes::telemetry::{get_subscriber, init_subscriber};
use tracing_subscriber::EnvFilter; 
use once_cell::sync::Lazy;
use secrecy::ExposeSecret;

static TRACING: Lazy<()> = Lazy::new(||   
    {  
    
        let env_filter = "info".to_string();
        if std::env::var("TEST_LOG").is_ok() {
         let subscriber = get_subscriber("test".into(), env_filter, std::io::stdout);
         init_subscriber(subscriber);}
         else {
            let subscriber = get_subscriber("test".into(), env_filter, std::io::sink());
            init_subscriber(subscriber);
         }
});

#[tokio::test]
async fn health (){
    let app_address = spawn_app();
    let client =  reqwest::Client::new();
    let resp = client.get(&format!("{}/health", &app_address)).send().await.expect("Failed to send request");
    assert_eq!(resp.status(), 200);
}
pub struct TestApp {
    pub address: String,
    pub db_pool: PgPool,
}


//this is a use from lib.rs
 fn spawn_app() -> TestApp {

 
    Lazy::force(&TRACING);
    let listener = TcpListener::bind("127.0.0.1:0").expect("Failed to bind random port");
    let port = listener.local_addr().unwrap().port();
    let configuration = get_configuration().expect("Failed to get configuration");
    let connection_string = configuration.database.connection_string().expose_secret();
    let db_pool=PgPool::connect(&connection_string).await.expect("Failed to connect to Postgres");
    let server = webserver::run(listener,db_pool).expect("Failed to run server");
    let _ = tokio::spawn(async move {
        server.await.unwrap();
    });
    TestApp {
        address: format!("http://127.0.0.1:{}", port),
        db_pool: db_pool,
    }
}

#[tokio::test]
async fn subscribe_returns_a_200_for_valid_form_data(){
    let app = spawn_app();
    let client = reqwest::Client::new();

    let body = "name=le%20guin&email=ursula_le_guin%40gmail.com";
    let resp = client.post(&format!("{}/subscribe", &app.address)).header("Content-Type", "application/x-www-form-urlencoded").body(body).send().await.expect("Failed to send request");
    assert_eq!(resp.status(), 200);
    let saved = sqlx::query!("SELECT email, name, subscribed_at FROM subscriptions",)
    .fetch_one(app.db_pool.get_ref())
    .await
    .expect("Failed to fetch saved subscription");
    assert_eq!(saved.email, "ursula_le_guin@gmail.com");
    assert_eq!(saved.name, "le guin");
    assert_eq!(saved.subscribed_at, saved.subscribed_at);
}
#[tokio::test]
async fn subscribe_returns_a_400_when_data_is_missing(){
    let app = spawn_app();
    let client = reqwest::Client::new();
    let test_cases = vec![
        ("name=le%20guin", "missing the email"),
        ("email=ursula_le_guin%40gmail.com", "missing the name"),
        ("", "missing both name and email"),
    ];
    for (invalid_body, error_message) in test_cases {
        let resp = client.post(&format!("{}/subscribe", &app.address)).header("Content-Type", "application/x-www-form-urlencoded").body(invalid_body).send().await.expect("Failed to send request");
        assert_eq!(resp.status(), 400);
        assert_eq!(resp.text().await.unwrap(), format!("'{}' field is required", error_message));
    }
}